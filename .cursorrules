# Project: Blog Battle (React + Node + MongoDB)
Monorepo with /backend and /frontend.

Tech:
- Backend: Node.js, Express, MongoDB (Mongoose), JWT (httpOnly cookie), Socket.IO
- Frontend: React (Vite), TailwindCSS, Redux Toolkit + RTK Query, socket.io-client

MVP must-haves:
- Auth: register/login + GET /auth/me (cookie-based JWT)
- Posts: create + list (title, content, category, imageUrl)
- Matches: seed 2 semifinals from 4 posts (same bracketId), vote once per user/match
- Live percentages via Socket.IO ("match:update"), auto close at VOTE_LIMIT, auto-create final when both semifinals close ("match:closed")
- At least 4 demo posts and 2 active matches

Folder layout (required):
backend/src/{server.js,db.js,config.js}
backend/src/middleware/auth.js
backend/src/models/{User.js,Post.js,Match.js,Vote.js}
backend/src/routes/{auth.routes.js,post.routes.js,match.routes.js}
backend/src/utils/{bracket.js,pickNextMatch.js}
frontend/src/app/{store.js,api.js}
frontend/src/features/{auth/authSlice.js,posts/postsApi.js,match/matchApi.js}
frontend/src/components/{Navbar.jsx,VotePair.jsx,WinnerBadge.jsx}
frontend/src/pages/{Home.jsx,Login.jsx,Register.jsx,NewPost.jsx,Vote.jsx,Results.jsx}
frontend/{App.jsx,main.jsx, index.css}

Env:
- backend/.env: PORT=4000, MONGO_URI=..., JWT_SECRET=..., CLIENT_ORIGIN=http://localhost:5173, VOTE_LIMIT=10
- frontend/.env: VITE_API_BASE=http://localhost:4000

Style:
- Minimal, readable, no over-abstraction. Informative JSON errors. Helpful console logs.

If something breaks:
- Propose a fix, patch affected files, show diffs.
- Keep CORS (origin + credentials) and cookie flow consistent.
